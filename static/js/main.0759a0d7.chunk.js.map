{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","value","filterReducer","setTodos","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","todosState","currentTodoState","visibleTodos","filteredByQuery","title","toLowerCase","includes","trim","completed","filterTodos","length","className","map","classNames","id","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","e","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","loadUser","a","userId","useEffect","undefined","href","email","name","App","isLoading","setIsLoading","loadTodos","todosFromServer","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA8BrCE,EAjBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MAEb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCpBPE,EAAsB,CAAEC,MAAO,GAAIC,OAAQ,OAuBpCT,EApCI,SAACU,GAAD,MAAoC,CACnDR,KAAM,mBACNC,QAASO,IAkCEV,EA/BK,SAACU,GAAD,MAAqC,CACrDR,KAAM,oBACNC,QAASO,IA+BIC,EAvBO,WAA2C,IAA1CN,EAAyC,uDAAjCE,EAAcD,EAAmB,uCAC9D,OAAQA,EAAOJ,MACb,IAAK,mBACH,OAAO,2BACFG,GADL,IAEEG,MAAOF,EAAOH,UAGlB,IAAK,oBACH,OAAO,2BACFE,GADL,IAEEI,OAAQH,EAAOH,UAGnB,QACE,OAAO,eACFE,KChCEO,EAAW,SAACF,GAAD,MAAoC,CAC1DR,KAAM,kBACNC,QAASO,IAiBIG,EAZM,WAAiD,IAAhDC,EAA+C,uDAA/B,GAAIR,EAA2B,uCACnE,MACO,oBADCA,EAAOJ,KAEJI,EAAOH,QAGPW,GCTPC,EAAcC,0BAAgB,CAClCC,YAAab,EACbc,OAAQP,EACRG,MAAOD,IAIIM,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oECdPC,GADoCC,IACcC,K,OCMlDC,EAAqB,WAChC,IAAMC,EAAWH,cACXI,EAAaL,GAAe,SAAAnB,GAAK,OAAIA,EAAMS,SAC3CgB,EAAmBN,GAAe,SAAAnB,GAAK,OAAIA,EAAMY,eA0BjDc,EAtBc,SAClBjB,EACAN,EACAC,GAEA,IAAMuB,EAAkBlB,EAAMI,QAC5B,SAAAjB,GAAI,OAAIA,EAAKgC,MAAMC,cAChBC,SAAS3B,EAAM0B,cAAcE,WAGlC,OAAQ3B,GACN,IAAK,SACH,OAAOuB,EAAgBd,QAAO,SAAAjB,GAAI,OAAKA,EAAKoC,aAE9C,IAAK,YACH,OAAOL,EAAgBd,QAAO,SAAAjB,GAAI,OAAIA,EAAKoC,aAE7C,QACE,OAAOL,GAIQM,CAAYT,EAzBdL,GAAe,SAAAnB,GAAK,OAAIA,EAAMa,OAAOV,SACpCgB,GAAe,SAAAnB,GAAK,OAAIA,EAAMa,OAAOT,WA8BzD,OACE,mCAC2B,IAAxBsB,EAAaQ,OAEV,mBAAGC,UAAU,0BAAb,iEAMA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGT,EAAaU,KAAI,SAAAxC,GAAI,OACpB,qBACE,UAAQ,OAERuC,UAAWE,IAAW,GAAI,CACxB,4BAA6BZ,IAAqB7B,IAJtD,UAOE,oBAAIuC,UAAU,eAAd,SAA8BvC,EAAK0C,KACnC,oBAAIH,UAAU,eAAd,SACGvC,EAAKoC,WAEJ,sBAAMG,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAEEA,UAAWE,IAAW,GAAI,CACxB,mBAAoBzC,EAAKoC,UACzB,mBAAoBpC,EAAKoC,YAJ7B,SAOGpC,EAAKgC,UAIV,oBAAIO,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACL0C,QAAS,WAjE3BhB,EAAS5B,EAiEsCC,KAJ/B,SAME,sBAAMuC,UAAU,OAAhB,SACE,mBAAGA,UAAWE,IAAW,MAAO,CAC9B,eAAgBZ,IAAqB7B,EACrC,SAAU6B,IAAqB7B,cArClCA,EAAK0C,eCrEfE,EAAuB,WAClC,IAAMjB,EAAWH,cACXjB,EAAQgB,GAAe,SAAAnB,GAAK,OAAIA,EAAMa,OAAOV,SAUnD,OACE,uBACEgC,UAAU,mBACVM,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGR,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRS,SAAU,SAACC,GAhBnBtB,EAASuB,EAgBmCD,EAhBLE,OAAO1C,SAcxC,UAIE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAG8B,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACVa,YAAY,YACZ3C,MAAOF,EACPyC,SAAU,SAACC,GA5BjBtB,EAASuB,EA4BgCD,EA5BHE,OAAO1C,WA8BzC,sBAAM8B,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBc,MAAO,CAAEC,cAAe,OAAxD,SACG/C,EAAM+B,OAAS,GAEd,wBACE,UAAQ,oBACRrC,KAAK,SACLsC,UAAU,SACVI,QAAS,kBAAMhB,EAASuB,EAAuB,iBCrDhDK,G,MAAmB,kBAC9B,qBAAKhB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASiB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICbMC,EAAsB,WACjC,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEM3C,EAAWH,cAEXK,EAAmBN,GAAe,SAAAnB,GAAK,OAAIA,EAAMY,eAEjDuD,EAAQ,uCAAG,sBAAAC,EAAA,0DACX3C,EADW,4BAEbyC,EAFa,SDQKG,ECNI5C,EAAiB4C,ODMFjB,EAAG,iBAAiBiB,ICR5C,mEDQI,IAACA,ICRL,OAAH,qDAMdC,qBAAU,WACRH,MACC,IAMH,OACE,sBAAKhC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEO,OAArBV,QAAsC8C,IAATN,EAC1B,cAAC,EAAD,IAEA,sBAAK9B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYV,EAAiBa,MAI7B,wBACEzC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACRI,QAzBQ,WACpBhB,EAAS5B,WA4BD,sBAAKwC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGV,EAAiBG,QAGpB,oBAAGO,UAAU,QAAQ,UAAQ,aAA7B,UACGV,EAAiBO,UACd,wBAAQG,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBACH,OACD,mBAAGqC,KAAI,iBAAYP,EAAKQ,OAAxB,gBACGR,QADH,IACGA,OADH,EACGA,EAAMS,oBCnDZC,EAAgB,WAC3B,MAAkCX,oBAAS,GAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KAEMtD,EAAWH,cACXR,EAAcO,GAAe,SAAAnB,GAAK,OAAIA,EAAMY,eAE5CkE,EAAS,uCAAG,4BAAAV,EAAA,sEAEdS,GAAa,GAFC,SFCUzB,EAAY,UEDtB,OAIR2B,EAJQ,OAMdxD,EAAShB,EAASwE,IANJ,sDAQR,IAAIC,MAAJ,iBARQ,yBAUdH,GAAa,GAVC,4EAAH,qDAkBf,OAJAP,qBAAU,WACRQ,MACC,IAGD,qCACE,qBAAK3C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACGyC,EACG,cAAC,EAAD,IACA,cAAC,EAAD,aAMXhE,GAAe,cAAC,EAAD,QCjDhBqE,EAAO,kBACX,cAAC,IAAD,CAAUnE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNoE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.0759a0d7.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: value,\n});\n\nconst setStatus = (value: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: value,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype State = { query: string, status: Status };\nconst initialState: State = { query: '', status: 'all' };\n\nconst filterReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport const actions = { setQuery, setStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'TODOS/SET_TODOS', payload: Todo[] };\n\nexport const setTodos = (value: Todo[]): SetTodosAction => ({\n  type: 'TODOS/SET_TODOS',\n  payload: value,\n});\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'TODOS/SET_TODOS':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n// import { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todosState = useAppSelector(state => state.todos);\n  const currentTodoState = useAppSelector(state => state.currentTodo);\n  const queryState = useAppSelector(state => state.filter.query);\n  const statusState = useAppSelector(state => state.filter.status);\n\n  const filterTodos = (\n    todos: Todo[],\n    query: string,\n    status: Status,\n  ) => {\n    const filteredByQuery = todos.filter(\n      todo => todo.title.toLowerCase()\n        .includes(query.toLowerCase().trim()),\n    );\n\n    switch (status) {\n      case 'active':\n        return filteredByQuery.filter(todo => !todo.completed);\n\n      case 'completed':\n        return filteredByQuery.filter(todo => todo.completed);\n\n      default:\n        return filteredByQuery;\n    }\n  };\n\n  const visibleTodos = filterTodos(todosState, queryState, statusState);\n\n  const handleOnClick = (selectedTodo: Todo) => {\n    dispatch(actions.setTodo(selectedTodo));\n  };\n\n  return (\n    <>\n      {visibleTodos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames('', {\n                    'has-background-info-light': currentTodoState === todo,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed\n                    && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      // className=\"has-text-danger\"\n                      className={classNames('', {\n                        'has-text-danger': !todo.completed,\n                        'has-text-success': todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleOnClick(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames('far', {\n                          'fa-eye-slash': currentTodoState === todo,\n                          'fa-eye': currentTodoState !== todo,\n                        })}\n                        />\n                      </span>\n\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => handleStatusChange(e)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleQueryChange(e)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n\n  const dispatch = useDispatch();\n\n  const currentTodoState = useAppSelector(state => state.currentTodo);\n\n  const loadUser = async () => {\n    if (currentTodoState) {\n      setUser(await getUser(currentTodoState.userId));\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const handleOnClick = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {currentTodoState === null || user === undefined\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodoState.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleOnClick}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodoState.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodoState.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { setTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    try {\n      setIsLoading(true);\n\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodos(todosFromServer));\n    } catch (err) {\n      throw new Error(`${err}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}